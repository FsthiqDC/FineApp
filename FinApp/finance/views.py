# Importy modu≈Ç√≥w Django, DRF oraz narzƒôdzi pomocniczych
from django.contrib.auth import authenticate  # Funkcja s≈Çu≈ºƒÖca do uwierzytelniania u≈ºytkownika
from django.shortcuts import render  # S≈Çu≈ºy do renderowania szablon√≥w (HTML)
from django.http import JsonResponse  # Umo≈ºliwia zwracanie odpowiedzi JSON
from django.middleware.csrf import get_token  # Pobiera token CSRF
from django.contrib.auth.decorators import login_required  # Dekorator sprawdzajƒÖcy, czy u≈ºytkownik jest zalogowany
from django.views.decorators.csrf import csrf_exempt  # Dekorator wy≈ÇƒÖczajƒÖcy weryfikacjƒô CSRF

# Kolejne importy (niekt√≥re powt√≥rzone, warto je zredukowaƒá w optymalnej wersji)
from django.contrib.auth.decorators import login_required
from supabase import create_client, Client  # Import klienta Supabase do komunikacji z bazƒÖ danych
from datetime import datetime, timedelta  # Importy klasy datetime oraz timedelta do operacji na datach
from django.http import JsonResponse  # Powt√≥rzony import (mo≈ºna usunƒÖƒá duplikat)
from django.views.decorators.csrf import csrf_exempt  # Powt√≥rzony import CSRF
from datetime import datetime  # Powt√≥rzony import datetime
from django.conf import settings  # Import ustawie≈Ñ Django
from rest_framework.decorators import api_view, permission_classes  # Dekoratory DRF do obs≈Çugi widok√≥w API
from rest_framework.status import HTTP_200_OK, HTTP_403_FORBIDDEN, HTTP_500_INTERNAL_SERVER_ERROR,  HTTP_404_NOT_FOUND, HTTP_201_CREATED, HTTP_400_BAD_REQUEST, HTTP_405_METHOD_NOT_ALLOWED  # Sta≈Çe status√≥w HTTP
from rest_framework.permissions import IsAuthenticated  # Dekorator uprawnie≈Ñ - sprawdza, czy u≈ºytkownik jest uwierzytelniony
from rest_framework.authentication import TokenAuthentication  # Klasa uwierzytelniania tokenem (je≈õli potrzebna)
from rest_framework.response import Response  # Obiekt odpowiedzi DRF
import jwt, os, json, bcrypt, logging, re, calendar, uuid  # Importy bibliotek: jwt, os, json, bcrypt, logging, re, calendar, uuid
from datetime import datetime  # Kolejny powt√≥rzony import datetime
from isoweek import Week  # Import biblioteki do obs≈Çugi tygodni ISO (przydatna do oblicze≈Ñ dat)

# Konfiguracja loggera do rejestrowania zdarze≈Ñ
logger = logging.getLogger(__name__)

# Inicjalizacja klienta Supabase ‚Äì pobieranie adresu URL oraz klucza z zmiennych ≈õrodowiskowych
SUPABASE_URL = os.getenv('SUPABASE_URL')
SUPABASE_KEY = os.getenv('SUPABASE_KEY')
supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)

# Pobranie klucza sekretnego Django (do generowania token√≥w JWT) z zmiennych ≈õrodowiskowych
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InVqcnNtZGVnYnpxamNzcnh2eWFvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzU0OTAyMzksImV4cCI6MjA1MTA2NjIzOX0.r9GbGA8I0hfO9yqEif8jEOGQzvfJ_WvRD2i4YLU2rdM')

# -----------------------------------------------------------------------------
# Funkcja: categories_view
# -----------------------------------------------------------------------------
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def categories_view(request):
    """
    Widok zwracajƒÖcy listƒô kategorii z tabeli 'Categories'.
    Wymaga poprawnego tokena JWT w nag≈Ç√≥wku Authorization.
    """
    # Pobranie nag≈Ç√≥wka Authorization
    auth_header = request.headers.get('Authorization')
    print("üîë Nag≈Ç√≥wek Authorization:", auth_header)

    # Sprawdzenie, czy nag≈Ç√≥wek zawiera token
    if not auth_header:
        return Response({"error": "Brak tokena autoryzacyjnego"}, status=HTTP_403_FORBIDDEN)

    try:
        # Podzia≈Ç nag≈Ç√≥wka na prefiks i token
        prefix, token = auth_header.split(' ')
        if prefix.lower() != 'bearer':
            return Response({"error": "Nieprawid≈Çowy prefiks tokena"}, status=HTTP_403_FORBIDDEN)

        # Dekodowanie tokena JWT przy u≈ºyciu SUPABASE_KEY
        payload = jwt.decode(token, SUPABASE_KEY, algorithms=['HS256'])
        user_id = payload.get('user_id')

        # Walidacja pobranego user_id
        if not user_id or not isinstance(user_id, str):
            return Response({"error": "Nieprawid≈Çowy identyfikator u≈ºytkownika"}, status=HTTP_403_FORBIDDEN)

        print("‚úÖ Token poprawny. Pobieranie kategorii...")

        # Wykonanie zapytania do Supabase, pobranie wszystkich rekord√≥w z tabeli 'Categories'
        response = supabase.table('Categories').select('*').execute()

        # Je≈õli dane zosta≈Çy pobrane, zwr√≥ƒá je
        if response.data:
            categories = response.data
            return Response({"categories": categories}, status=HTTP_200_OK)
        
        # Je≈õli wystƒÖpi≈Ç b≈ÇƒÖd podczas zapytania do Supabase, zwr√≥ƒá b≈ÇƒÖd serwera
        if response.error:
            print(f"‚ùå B≈ÇƒÖd Supabase: {response.error}")
            return Response({"error": f"B≈ÇƒÖd pobierania kategorii: {response.error}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        # Domy≈õlna odpowied≈∫, gdy nie uda≈Ço siƒô pobraƒá danych
        return Response({"error": "Nie uda≈Ço siƒô pobraƒá kategorii"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

    # Obs≈Çuga b≈Çƒôdu, gdy token wygas≈Ç
    except jwt.ExpiredSignatureError:
        return Response({"error": "Token wygas≈Ç"}, status=HTTP_403_FORBIDDEN)
    # Obs≈Çuga b≈Çƒôdu przy nieprawid≈Çowym tokenie
    except jwt.InvalidTokenError:
        return Response({"error": "Nieprawid≈Çowy token"}, status=HTTP_403_FORBIDDEN)
    # Og√≥lna obs≈Çuga pozosta≈Çych wyjƒÖtk√≥w
    except Exception as e:
        print(f"‚ùå WystƒÖpi≈Ç b≈ÇƒÖd: {e}")
        return Response({"error": f"B≈ÇƒÖd serwera: {e}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

# -----------------------------------------------------------------------------
# Funkcja: home_view
# -----------------------------------------------------------------------------
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def home_view(request):
    """
    Widok zwracajƒÖcy r√≥≈ºne statystyki finansowe u≈ºytkownika na podstawie filtr√≥w przekazanych jako parametry GET.
    Parametry:
      - year: rok (np. '2025')
      - month: miesiƒÖc w formacie YYYY-MM (np. '2025-02')
      - chart: typ wykresu (np. 'weekly_averages' lub 'goals_status')
      - week: tydzie≈Ñ w formacie YYYY-WNN (np. '2025-W03')
    Dodatkowo zwraca: yearly_expenses, monthly_expenses, expense_categories, incomes_vs_expenses.
    """
    try:
        # Pobranie nag≈Ç√≥wka Authorization
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            return Response({"error": "Brak tokena autoryzacyjnego"}, status=HTTP_403_FORBIDDEN)

        # Rozdzielenie nag≈Ç√≥wka na prefiks i token
        prefix, token = auth_header.split(' ')
        if prefix.lower() != 'bearer':
            return Response({"error": "Nieprawid≈Çowy prefiks tokena"}, status=HTTP_403_FORBIDDEN)

        # Dekodowanie tokena JWT
        payload = jwt.decode(token, SUPABASE_KEY, algorithms=['HS256'])
        user_id = payload.get('user_id')

        # Pobranie parametr√≥w GET (filtry)
        year_str = request.GET.get('year')     # Przyk≈Çadowo '2025'
        month_str = request.GET.get('month')   # Przyk≈Çadowo '2025-02'
        chart_type = request.GET.get('chart')  # Przyk≈Çadowo 'weekly_averages' lub 'goals_status'
        week_str = request.GET.get('week')     # Przyk≈Çadowo '2025-W03'

        # Inicjalizacja struktury wynikowej
        results = {
            "yearly_expenses": [0]*12,        # Lista wydatk√≥w rocznych ‚Äì indeks 0 odpowiada styczniowi
            "monthly_expenses": [0]*31,       # Lista wydatk√≥w miesiƒôcznych ‚Äì indeks 0 odpowiada pierwszemu dniu miesiƒÖca
            "expense_categories": {},         # S≈Çownik z wydatkami podzielonymi na kategorie
            "incomes_vs_expenses": {"incomes": [0]*12, "expenses": [0]*12}  # Por√≥wnanie przychod√≥w i wydatk√≥w
        }

        # Pobieranie transakcji u≈ºytkownika z tabeli 'Transactions'
        query = supabase.table('Transactions').select('*').eq('transaction_owner', user_id)

        # 1) Filtrowanie po tygodniu, je≈õli parametr week_str zosta≈Ç przekazany i wykres ma typ "weekly_averages"
        if week_str and chart_type == "weekly_averages":
            match = re.match(r"^(\d{4})-W(\d{2})$", week_str)
            if match:
                year_w = int(match.group(1))
                week_n = int(match.group(2))
                w = Week(year_w, week_n)  # U≈ºycie biblioteki isoweek do obliczenia zakresu tygodnia
                start_of_week = w.monday().strftime("%Y-%m-%d")
                end_of_week   = w.sunday().strftime("%Y-%m-%d")
                query = query.gte('transcation_data', start_of_week).lte('transcation_data', end_of_week)

        # 2) Filtrowanie transakcji wed≈Çug roku
        if year_str:
            start_of_year = f"{year_str}-01-01"
            end_of_year   = f"{year_str}-12-31"
            query = query.gte('transcation_data', start_of_year).lte('transcation_data', end_of_year)

        # 3) Filtrowanie transakcji wed≈Çug miesiƒÖca
        if month_str:
            try:
                y_m, m_m = month_str.split('-')
                _, last_day = calendar.monthrange(int(y_m), int(m_m))
                start_of_month = f"{y_m}-{m_m}-01"
                end_of_month   = f"{y_m}-{m_m}-{last_day}"
                query = query.gte('transcation_data', start_of_month).lte('transcation_data', end_of_month)
            except:
                pass  # W przypadku b≈Çƒôdu w parsowaniu miesiƒÖca nie wykonujemy filtrowania

        # Wykonanie zapytania do Supabase
        transactions_response = query.execute()
        transactions = transactions_response.data or []

        # Pobranie listy kategorii z tabeli 'Categories'
        cat_resp = supabase.table('Categories').select('*').execute()
        categories_data = cat_resp.data or []
        # Utworzenie mapy: klucz = category_id, warto≈õƒá = category_name
        categories_map = {c['category_id']: c['category_name'] for c in categories_data}

        # Agregacja danych transakcji
        if transactions:
            yearly_expenses = [0]*12
            monthly_expenses = [0]*31
            expense_categories = {}
            incomes_vs_expenses = {"incomes": [0]*12, "expenses": [0]*12}

            # Iteracja po ka≈ºdej transakcji
            for t in transactions:
                amount = t['transaction_amount']
                date_str = t['transcation_data']
                date_obj = datetime.strptime(date_str, "%Y-%m-%d")  # Konwersja ciƒÖgu na obiekt datetime
                m_index = date_obj.month - 1  # Indeks miesiƒÖca (0-11)
                d_index = date_obj.day - 1    # Indeks dnia (0-30)

                # Sprawdzamy, czy transakcja jest wydatkiem
                if t['transaction_type'] == 'Wydatek':
                    yearly_expenses[m_index] += amount  # Dodanie do sumy miesiƒôcznej
                    if d_index < 31:
                        monthly_expenses[d_index] += amount  # Dodanie do sumy dziennej
                    # Pobranie nazwy kategorii lub ustawienie domy≈õlnej nazwy, je≈õli nie znaleziono
                    cat_name = categories_map.get(t['transaction_category_id'], "Nieznana kategoria")
                    expense_categories[cat_name] = expense_categories.get(cat_name, 0) + amount
                    incomes_vs_expenses['expenses'][m_index] += amount
                else:
                    # Je≈õli transakcja nie jest wydatkiem, zak≈Çadamy, ≈ºe jest przychodem
                    incomes_vs_expenses['incomes'][m_index] += amount

            # Aktualizacja wynikowej struktury danych
            results["yearly_expenses"] = yearly_expenses
            results["monthly_expenses"] = monthly_expenses
            results["expense_categories"] = expense_categories
            results["incomes_vs_expenses"] = incomes_vs_expenses

        # Dodatkowy wykres: ≈õrednie wydatki tygodniowe
        weekly_averages = [0]*7
        if chart_type == "weekly_averages" and transactions:
            counts = [0]*7  # Liczba transakcji dla ka≈ºdego dnia tygodnia
            for t in transactions:
                if t['transaction_type'] == 'Wydatek':
                    date_obj = datetime.strptime(t['transcation_data'], "%Y-%m-%d")
                    dow = date_obj.weekday()  # Dzie≈Ñ tygodnia: 0 = poniedzia≈Çek, 6 = niedziela
                    weekly_averages[dow] += t['transaction_amount']
                    counts[dow] += 1
            # Obliczenie ≈õredniej wydatk√≥w dla ka≈ºdego dnia tygodnia
            for i in range(7):
                if counts[i] > 0:
                    weekly_averages[i] /= counts[i]

        # Dodatkowa logika: status cel√≥w oszczƒôdno≈õciowych
        goals_status_data = None
        if chart_type == "goals_status":
            # Pobranie cel√≥w z tabeli SavingsGoals dla danego u≈ºytkownika
            goals_query = supabase.table('SavingsGoals').select('*').eq('savingsgoals_owner_id', user_id)
            # Mo≈ºliwo≈õƒá filtrowania cel√≥w wed≈Çug roku lub daty (zakomentowany przyk≈Çad)
            # if year_str:
            #     start_of_year = f"{year_str}-01-01"
            #     end_of_year   = f"{year_str}-12-31"
            #     goals_query = goals_query.gte('created_at', start_of_year).lte('created_at', end_of_year)
            goals_resp = goals_query.execute()
            if goals_resp.data:
                all_goals = goals_resp.data
                # Liczenie cel√≥w uko≈Ñczonych oraz aktywnych
                completed_count = sum(1 for g in all_goals if g['savingsgoals_status'] == 'Uko≈Ñczony')
                active_count    = sum(1 for g in all_goals if g['savingsgoals_status'] != 'Uko≈Ñczony')
                goals_status_data = {"completed": completed_count, "active": active_count}

        # Przygotowanie ko≈Ñcowej struktury odpowiedzi
        data_to_return = {
            "yearly_expenses": results["yearly_expenses"],
            "monthly_expenses": results["monthly_expenses"],
            "expense_categories": results["expense_categories"],
            "incomes_vs_expenses": results["incomes_vs_expenses"],
        }
        # Dodanie wykresu ≈õrednich tygodniowych, je≈õli wymagane
        if chart_type == "weekly_averages":
            data_to_return["weekly_averages"] = weekly_averages
        # Dodanie statusu cel√≥w oszczƒôdno≈õciowych, je≈õli wymagane
        if chart_type == "goals_status" and goals_status_data is not None:
            data_to_return["goals_status"] = goals_status_data

        return Response(data_to_return, status=HTTP_200_OK)

    except Exception as e:
        logger.exception("B≈ÇƒÖd w home_view:")
        return Response({"error": f"B≈ÇƒÖd serwera: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

# -----------------------------------------------------------------------------
# Funkcja: login_user
# -----------------------------------------------------------------------------
@csrf_exempt
def login_user(request):
    """
    Funkcja logowania u≈ºytkownika.
    Oczekuje metody POST z danymi: 'email' i 'password'.
    Po poprawnym uwierzytelnieniu generuje token JWT oraz aktualizuje datƒô ostatniego logowania.
    """
    if request.method != 'POST':
        return JsonResponse({"error": "Metoda nieobs≈Çugiwana"}, status=HTTP_405_METHOD_NOT_ALLOWED)

    try:
        # Parsowanie danych z cia≈Ça ≈ºƒÖdania (JSON)
        body = json.loads(request.body)
        email = body.get('email')
        password = body.get('password')

        # Walidacja: email i has≈Ço muszƒÖ byƒá podane
        if not email or not password:
            return JsonResponse({"error": "Email i has≈Ço sƒÖ wymagane"}, status=HTTP_400_BAD_REQUEST)

        # Pobranie u≈ºytkownika z tabeli App_Users w Supabase
        response = supabase.table('App_Users').select('*').eq('user_email', email).single().execute()
        user = response.data

        # Je≈õli u≈ºytkownik nie zosta≈Ç znaleziony
        if not user:
            return JsonResponse({"error": "Nieprawid≈Çowy email lub has≈Ço"}, status=401)

        # Sprawdzenie has≈Ça przy u≈ºyciu bcrypt
        if not bcrypt.checkpw(password.encode('utf-8'), user['password'].encode('utf-8')):
            return JsonResponse({"error": "Nieprawid≈Çowe has≈Ço"}, status=401)

        # Generowanie tokena JWT z danymi u≈ºytkownika oraz datƒÖ wyga≈õniƒôcia
        payload = {
            'user_id': user['user_id'],
            'username': user['username'],
            'user_type': user['user_type'],
            'exp': datetime.utcnow() + timedelta(hours=1)
        }
        token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')
        print("üîë Wygenerowany token:", token)
        # Aktualizacja daty ostatniego logowania u≈ºytkownika
        supabase.table('App_Users').update({'last_login': datetime.utcnow().isoformat()}).eq('user_id', user['user_id']).execute()

        return JsonResponse({
            "message": "Zalogowano pomy≈õlnie",
            "token": token,
            "user": {
                "username": user['username'],
                "user_type": user['user_type']
            }
        })

    except Exception as e:
        return JsonResponse({"error": str(e)}, status=500)

# -----------------------------------------------------------------------------
# Funkcja: get_user
# -----------------------------------------------------------------------------
@login_required
def get_user(request):
    """
    Funkcja zwracajƒÖca podstawowe informacje o zalogowanym u≈ºytkowniku.
    U≈ºywa mechanizmu Django auth (login_required).
    """
    return JsonResponse({
        "username": request.user.username,
        "user_type": request.user.user_type
    })

# -----------------------------------------------------------------------------
# Funkcja: csrf_view
# -----------------------------------------------------------------------------
def csrf_view(request):
    """
    Funkcja zwracajƒÖca token CSRF, kt√≥ry mo≈ºe byƒá u≈ºyty w ≈ºƒÖdaniach AJAX.
    """
    token = get_token(request)
    return JsonResponse({'csrfToken': token})

# -----------------------------------------------------------------------------
# Funkcja: login_view
# -----------------------------------------------------------------------------
def login_view(request):
    """
    Prosty widok logowania przy u≈ºyciu funkcji authenticate Django.
    U≈ºywany g≈Ç√≥wnie jako przyk≈Çadowy widok.
    """
    if request.method == 'POST':
        data = json.loads(request.body)
        email = data.get('email')
        password = data.get('password')
        user = authenticate(request, username=email, password=password)
        if user is not None:
            return JsonResponse({'message': 'Zalogowano pomy≈õlnie!'}, status=HTTP_200_OK)
        else:
            return JsonResponse({'message': 'Nieprawid≈Çowe dane logowania.'}, status=HTTP_400_BAD_REQUEST)
    return JsonResponse({'message': 'Nieobs≈Çugiwana metoda.'}, status=HTTP_405_METHOD_NOT_ALLOWED)

# -----------------------------------------------------------------------------
# Funkcja: register_view
# -----------------------------------------------------------------------------
@csrf_exempt
def register_view(request):
    
    if request.method == 'POST':
        try:
            data = json.loads(request.body)

            # Walidacja wymaganych p√≥l
            required_fields = ['username', 'email', 'password', 'first_name', 'last_name']
            for field in required_fields:
                if field not in data or not data[field]:
                    return JsonResponse({'message': f'Brak wymaganego pola: {field}'}, status=HTTP_400_BAD_REQUEST)
            
            # Sprawdzenie, czy u≈ºytkownik z podanym emailem ju≈º istnieje
            response = supabase.from_('App_Users').select('user_email').eq('user_email', data['email']).execute()
            if response.data and len(response.data) > 0:
                return JsonResponse({'message': 'U≈ºytkownik z tym adresem email ju≈º istnieje'}, status=HTTP_400_BAD_REQUEST)

            # Hashowanie has≈Ça przy u≈ºyciu bcrypt
            hashed_password = bcrypt.hashpw(data['password'].encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

            # Tworzenie nowego u≈ºytkownika w Supabase
            response = supabase.from_('App_Users').insert([
                {
                    'username': data['username'],
                    'user_email': data['email'],
                    'password': hashed_password,
                    'first_name': data['first_name'],
                    'last_name': data['last_name'],
                    'created_at': 'now()',
                    'last_login': 'now()',
                    'is_active': True,
                    'langauge': 'PL',
                    'currency': 'PLN',
                    'user_type': 'user'
                }
            ]).execute()

            return JsonResponse({'message': '‚úÖ U≈ºytkownik zosta≈Ç utworzony pomy≈õlnie'}, status=HTTP_201_CREATED)
        
        except json.JSONDecodeError:
            return JsonResponse({'message': 'B≈ÇƒÖd dekodowania JSON'}, status=HTTP_400_BAD_REQUEST)
        except Exception as e:
            return JsonResponse({'message': f'WystƒÖpi≈Ç b≈ÇƒÖd: {str(e)}'}, status=500)

    return JsonResponse({'message': 'Nieobs≈Çugiwana metoda'}, status=HTTP_405_METHOD_NOT_ALLOWED)

# -----------------------------------------------------------------------------
# Funkcja: transactions_view
# -----------------------------------------------------------------------------
@api_view(['GET', 'POST'])
@permission_classes([IsAuthenticated])
def transactions_view(request):
    """
    Widok obs≈ÇugujƒÖcy listƒô transakcji:
      - GET: zwraca transakcje zalogowanego u≈ºytkownika z paginacjƒÖ i mo≈ºliwo≈õciƒÖ filtrowania po miesiƒÖcu.
      - POST: umo≈ºliwia dodanie nowej transakcji.
    """
    print(f"DEBUG: Wywo≈Çano transactions_view z metodƒÖ {request.method}")
    try:
        # Pobranie identyfikatora zalogowanego u≈ºytkownika
        user_id = str(request.user.id)
        print("DEBUG: Ustalono user_id =", user_id)

        if request.method == 'GET':
            print("DEBUG: Obs≈Çuga metody GET - pobieranie transakcji u≈ºytkownika.")
            try:
                # Pobranie parametr√≥w paginacji i filtrowania
                page = int(request.GET.get('page', 1))       # Numer strony
                per_page = int(request.GET.get('per_page', 10))  # Liczba element√≥w na stronƒô
                month = request.GET.get('month')            # Opcjonalny filtr po miesiƒÖcu (YYYY-MM)

                # Zapytanie do Supabase o transakcje nale≈ºƒÖce do u≈ºytkownika
                query = supabase.from_('Transactions').select('*').eq('transaction_owner', user_id)

                # Je≈õli podano filtr po miesiƒÖcu, obliczamy zakres dat
                if month:
                    # Rozdzielenie roku i miesiƒÖca
                    year, month_number = map(int, month.split('-'))
                    _, last_day = calendar.monthrange(year, month_number)
                    start_date = f"{year}-{month_number:02d}-01"
                    end_date = f"{year}-{month_number:02d}-{last_day}"
                    # Dodanie warunk√≥w filtrowania do zapytania
                    query = query.gte('transcation_data', start_date).lte('transcation_data', end_date)              

                # Wykonanie zapytania
                response = query.execute()
                print("DEBUG: Odpowied≈∫ z supabase (GET):", response)

                # Sprawdzenie, czy odpowied≈∫ zawiera dane
                if not response or not hasattr(response, 'data'):
                    print("DEBUG: Nieoczekiwana odpowied≈∫ od serwera bazy danych (brak 'data').")
                    return Response({'error': 'Nieoczekiwana odpowied≈∫ od serwera bazy danych.'}, status=500)

                transactions = response.data

                # Implementacja prostej paginacji
                total_transactions = len(transactions)
                start = (page - 1) * per_page
                end = start + per_page
                paginated_transactions = transactions[start:end]

                print("DEBUG: Zwracam listƒô transakcji z paginacjƒÖ.")
                return Response({
                    'transactions': paginated_transactions,
                    'total_pages': (total_transactions + per_page - 1) // per_page,
                    'current_page': page,
                }, status=HTTP_200_OK)

            except Exception as e:
                print("DEBUG: B≈ÇƒÖd podczas pobierania transakcji:", e)
                return Response({'error': f'B≈ÇƒÖd serwera: {str(e)}'}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        elif request.method == 'POST':
            print("DEBUG: Obs≈Çuga metody POST - dodawanie nowej transakcji.")
            try:
                # Parsowanie danych JSON z cia≈Ça ≈ºƒÖdania
                data = json.loads(request.body)
                print("DEBUG: Otrzymane dane JSON (POST):", data)
                # Budowanie s≈Çownika nowej transakcji
                new_transaction = {
                    'transaction_owner': user_id,
                    'transaction_amount': data.get('amount'),
                    'transaction_category_id': data.get('categoryId'),
                    'transaction_payment_method': data.get('paymentMethod'),
                    'transaction_type': data.get('transactionType', 'Wydatek'),
                    'transcation_data': data.get('date'),
                    'transaction_description': data.get('description'),
                    'transaction_status': data.get('status', 'Uko≈Ñczona'),
                    'transaction_currency': data.get('currency', 'PLN'),
                }
                print("DEBUG: Zbudowany obiekt new_transaction:", new_transaction)

                # Wstawienie nowej transakcji do Supabase
                insert_resp = supabase.from_('Transactions').insert(new_transaction).execute()
                print("DEBUG: Odpowied≈∫ z supabase (POST):", insert_resp)

                print("DEBUG: Nowa transakcja zosta≈Ça pomy≈õlnie dodana.")
                # Przyk≈Çadowo zwracamy tak≈ºe przyk≈Çadowe ID transakcji
                return Response({'transaction': new_transaction, 'transaction_id': 123}, status=HTTP_201_CREATED)

            except Exception as e:
                print("DEBUG: B≈ÇƒÖd przy odczytywaniu/parsowaniu danych POST:", e)
                return Response({'error': str(e)}, status=500)

        print(f"DEBUG: Metoda {request.method} nieobs≈Çugiwana.")
        return Response({"error": "Method Not Allowed"}, status=HTTP_405_METHOD_NOT_ALLOWED)

    except Exception as e:
        print("DEBUG: B≈ÇƒÖd og√≥lny w transactions_view:", e)
        return Response({"error": str(e)}, status=HTTP_500_INTERNAL_SERVER_ERROR)

# -----------------------------------------------------------------------------
# Funkcja: transaction_detail_view
# -----------------------------------------------------------------------------
@api_view(['GET', 'PUT', 'DELETE'])
@permission_classes([IsAuthenticated])
def transaction_detail_view(request, transaction_id):
    """
    Widok umo≈ºliwiajƒÖcy:
      - GET: Pobranie szczeg√≥≈Çowych informacji o konkretnej transakcji.
      - PUT: Aktualizacjƒô danych transakcji.
      - DELETE: Usuniƒôcie transakcji.
    Transakcja jest identyfikowana przez unikalny identyfikator (UUID).
    """
    print(f"DEBUG: Wywo≈Çano transaction_detail_view z metodƒÖ {request.method} i ID = {transaction_id}")
    try:
        # ----------------------------------
        # 1. Pobieranie transakcji z bazy
        # ----------------------------------
        print("DEBUG: Pr√≥ba pobrania transakcji z bazy...")
        try:
            response = (
                supabase
                .table('Transactions')
                .select('*')
                .eq('transaction_id', str(transaction_id))
                .single()
                .execute()
            )
            print("DEBUG: Odpowied≈∫ z supabase (GET):", response)
        except Exception as err:
            print("DEBUG: B≈ÇƒÖd podczas pobierania transakcji:", err)
            return Response({"error": str(err)}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        # Sprawdzenie, czy transakcja zosta≈Ça znaleziona
        if not response.data:
            print("DEBUG: Brak transakcji o podanym ID w bazie")
            return Response({"error": "Transakcja nie znaleziona"}, status=HTTP_404_NOT_FOUND)

        transaction = response.data
        print("DEBUG: Pobrana transakcja:", transaction)

        # ----------------------------------
        # 2. Weryfikacja w≈Ça≈õciciela transakcji
        # ----------------------------------
        print("DEBUG: Sprawdzam w≈Ça≈õciciela transakcji...")
        if str(transaction['transaction_owner']) != str(request.user.id):
            print("DEBUG: U≈ºytkownik nie jest w≈Ça≈õcicielem transakcji!")
            return Response({"error": "Brak dostƒôpu do tej transakcji"}, status=HTTP_403_FORBIDDEN)
        print("DEBUG: U≈ºytkownik jest w≈Ça≈õcicielem transakcji.")

        # ----------------------------------
        # 3. Obs≈Çuga metod: GET / PUT / DELETE
        # ----------------------------------
        if request.method == 'GET':
            print("DEBUG: Obs≈Çuga metody GET - zwracam szczeg√≥≈Çy transakcji.")
            return Response({"transaction": transaction}, status=HTTP_200_OK)

        if request.method == 'PUT':
            print("DEBUG: Obs≈Çuga metody PUT - aktualizacja transakcji.")
            data = json.loads(request.body)
            print("DEBUG: Otrzymane dane JSON:", data)
            # Budowanie s≈Çownika z aktualizowanymi polami; je≈õli dane nie sƒÖ przes≈Çane, u≈ºywamy istniejƒÖcych warto≈õci
            updated_transaction = {
                'transaction_amount': data.get('amount', transaction['transaction_amount']),
                'transaction_category_id': data.get('categoryId', transaction['transaction_category_id']),
                'transaction_payment_method': data.get('paymentMethod', transaction['transaction_payment_method']),
                'transaction_type': data.get('transactionType', transaction['transaction_type']),
                'transaction_status': data.get('status', transaction['transaction_status']),
                'transcation_data': data.get('date', transaction['transcation_data']),
                'transaction_description': data.get('description', transaction['transaction_description']),
                'transaction_currency': data.get('currency', transaction['transaction_currency']),
            }
            print("DEBUG: Zbudowany obiekt updated_transaction:", updated_transaction)
            try:
                update_resp = (
                    supabase
                    .table('Transactions')
                    .update(updated_transaction)
                    .eq('transaction_id', str(transaction_id))
                    .execute()
                )
                print("DEBUG: Odpowied≈∫ z supabase (PUT):", update_resp)
            except Exception as err:
                print("DEBUG: B≈ÇƒÖd podczas aktualizacji transakcji:", err)
                return Response({"error": str(err)}, status=HTTP_500_INTERNAL_SERVER_ERROR)

            if not update_resp.data:
                # Je≈ºeli ≈ºadna zmiana nie zosta≈Ça wprowadzona
                print("DEBUG: Nic nie zosta≈Ço zaktualizowane (update_resp.data jest puste).")
                return Response({"message": "Zaktualizowano 0 rekord√≥w."}, status=HTTP_200_OK)

            print("DEBUG: Transakcja zosta≈Ça pomy≈õlnie zaktualizowana.")
            return Response({"message": "Transakcja zaktualizowana pomy≈õlnie"}, status=HTTP_200_OK)

        if request.method == 'DELETE':
            print("DEBUG: Obs≈Çuga metody DELETE - usuwanie transakcji.")
            try:
                print("DEBUG: wchodzƒô w DELETE, wysy≈Çam zapytanie do bazy...")
                delete_resp = (
                    supabase
                    .table('Transactions')
                    .delete()
                    .eq('transaction_id', str(transaction_id))
                    .execute()
                )
                print("DEBUG: supabase DELETE zapytanie posz≈Ço, oto wynik:")
                print("DEBUG delete_resp:", delete_resp)
            except Exception as err:
                print("DEBUG: B≈ÇƒÖd podczas usuwania transakcji:", err)
                return Response({"error": str(err)}, status=HTTP_500_INTERNAL_SERVER_ERROR)

            print("DEBUG: Transakcja zosta≈Ça pomy≈õlnie usuniƒôta.")
            return Response({"message": "Transakcja usuniƒôta pomy≈õlnie"}, status=HTTP_200_OK)

        # Je≈õli metoda nie jest obs≈Çugiwana, zwr√≥ƒá b≈ÇƒÖd 405
        return Response({"error": "Method not allowed"}, status=HTTP_405_METHOD_NOT_ALLOWED)

    except Exception as e:
        print("B≈ÇƒÖd og√≥lny:", e)
        return Response({"error": str(e)}, status=HTTP_500_INTERNAL_SERVER_ERROR)

# -----------------------------------------------------------------------------
# Funkcja: user_profile_view
# -----------------------------------------------------------------------------
@api_view(['GET', 'PUT'])
@permission_classes([IsAuthenticated])
def user_profile_view(request):
    """
    Widok obs≈ÇugujƒÖcy pobieranie (GET) oraz aktualizacjƒô (PUT) danych profilu u≈ºytkownika.
    Oczekujemy, ≈ºe dane bƒôdƒÖ przesy≈Çane pod kluczami: 'username', 'first_name', 'last_name' oraz 'user_email'.
    """
    try:
        # Konwertujemy identyfikator u≈ºytkownika do stringa ‚Äì to mo≈ºe byƒá przyczynƒÖ niedopasowania, je≈ºeli typy nie sƒÖ zgodne
        user_id = str(request.user.id)
        logger.debug("User ID: %s", user_id)

        if request.method == 'GET':
            try:
                user_response = supabase.table('App_Users')\
                    .select('*')\
                    .eq('user_id', user_id)\
                    .single()\
                    .execute()
                logger.debug("GET response: %s", user_response)
                user_data = user_response.data

                if not user_data:
                    return Response(
                        {"error": "Nie znaleziono u≈ºytkownika w bazie danych."},
                        status=HTTP_404_NOT_FOUND
                    )

                return Response({
                    "user_id": user_data['user_id'],
                    "username": user_data['username'],  # zak≈Çadamy, ≈ºe kolumna nazywa siƒô "username"
                    "user_email": user_data['user_email'],
                    "first_name": user_data.get('first_name', ''),
                    "last_name": user_data.get('last_name', ''),
                    "created_at": user_data.get('created_at', ''),
                    "last_login": user_data.get('last_login', ''),
                    "is_active": user_data.get('is_active', False),
                    "langauge": user_data.get('langauge', ''),
                    "currency": user_data.get('currency', ''),
                }, status=HTTP_200_OK)
            except Exception as e:
                logger.debug("B≈ÇƒÖd podczas pobierania danych (GET): %s", e)
                return Response(
                    {"error": "B≈ÇƒÖd podczas pobierania danych."},
                    status=HTTP_500_INTERNAL_SERVER_ERROR
                )

        elif request.method == 'PUT':
            try:
                data = request.data
                logger.debug("PUT payload: %s", data)
                updated_fields = {
                    "username": data.get('username'),
                    "first_name": data.get('first_name'),
                    "last_name": data.get('last_name'),
                    "user_email": data.get('user_email'),
                }
                updated_fields = {k: v for k, v in updated_fields.items() if v is not None}
                logger.debug("Updated fields: %s", updated_fields)

                update_response = supabase.table('App_Users')\
                    .update(updated_fields)\
                    .eq('user_id', user_id)\
                    .execute()
                logger.debug("Update response: %s", update_response)

                if update_response.error:
                    logger.debug("Update error: %s", update_response.error)
                    return Response(
                        {"error": "Nie uda≈Ço siƒô zaktualizowaƒá danych."},
                        status=HTTP_500_INTERNAL_SERVER_ERROR
                    )

                return Response(
                    {"message": "Dane u≈ºytkownika zosta≈Çy zaktualizowane."},
                    status=HTTP_200_OK
                )
            except Exception as e:
                logger.debug("WyjƒÖtek podczas aktualizacji danych (PUT): %s", e)
                return Response(
                    {"error": "WyjƒÖtek podczas aktualizacji danych."},
                    status=HTTP_500_INTERNAL_SERVER_ERROR
                )
        else:
            return Response(
                {"error": "Metoda nie jest obs≈Çugiwana."},
                status=HTTP_405_METHOD_NOT_ALLOWED
            )
    except Exception as e:
        logger.debug("Generalny wyjƒÖtek: %s", e)
        return Response(
            {"error": "Generalny b≈ÇƒÖd."},
            status=HTTP_500_INTERNAL_SERVER_ERROR
        )

# -----------------------------------------------------------------------------
# Funkcja: savings_goals_list_view
# -----------------------------------------------------------------------------
@api_view(['GET', 'POST'])
@permission_classes([IsAuthenticated])
def savings_goals_list_view(request):
    """
    Widok obs≈ÇugujƒÖcy listƒô cel√≥w oszczƒôdno≈õciowych (GET) oraz tworzenie nowego celu (POST).
    Tabela: 'SavingsGoals'. Oczekiwane pola zgodnie z TwojƒÖ strukturƒÖ:
      - savingsgoals_id (uuid)
      - savingsgoals_owner_id (uuid)
      - savingsgoals_name (text)
      - savingsgoals_target_amount (float8)
      - savingsgoals_amount (float8) ‚Äì domy≈õlnie 0
      - savingsgoals_status (text) ‚Äì np. 'Aktywny'
      - savingsgoals_currency (text)
    """
    # Weryfikacja tokena JWT z nag≈Ç√≥wka
    auth_header = request.headers.get('Authorization')
    if not auth_header:
        return Response({"error": "Brak tokena autoryzacyjnego"}, status=HTTP_403_FORBIDDEN)

    try:
        prefix, token = auth_header.split(' ')
        if prefix.lower() != 'bearer':
            return Response({"error": "Nieprawid≈Çowy prefiks tokena"}, status=HTTP_403_FORBIDDEN)

        payload = jwt.decode(token, SUPABASE_KEY, algorithms=['HS256'])
        user_id = payload.get('user_id')
    except Exception as e:
        return Response({"error": f"B≈ÇƒÖd autoryzacji: {str(e)}"}, status=HTTP_403_FORBIDDEN)

    # GET: Pobranie listy cel√≥w oszczƒôdno≈õciowych
    if request.method == 'GET':
        try:
            goals_response = supabase.table('SavingsGoals').select('*').eq('savingsgoals_owner_id', user_id).execute()
            if not goals_response or not hasattr(goals_response, 'data'):
                return Response({"goals": []}, status=HTTP_200_OK)

            goals_data = goals_response.data or []
            return Response({"goals": goals_data}, status=HTTP_200_OK)

        except Exception as e:
            return Response({"error": f"B≈ÇƒÖd podczas pobierania cel√≥w: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

    # POST: Tworzenie nowego celu oszczƒôdno≈õciowego
    if request.method == 'POST':
        try:
            body = json.loads(request.body)
            print("DEBUG: Otrzymane od frontendu:", body)

            new_goal = {
                "savingsgoals_owner_id": user_id,
                "savingsgoals_name": body.get('savingsgoals_name'),
                "savingsgoals_target_amount": float(body.get('savingsgoals_target_amount', 0.0)),
                "savingsgoals_amount": 0.0,
                "savingsgoals_status": "Aktywny",
                "savingsgoals_currency": body.get('savingsgoals_currency', 'PLN'),
            }
            print("DEBUG: Tworzony obiekt new_goal:", new_goal)

            insert_resp = supabase.table('SavingsGoals').insert(new_goal).execute()
            print("DEBUG: insert_resp =", insert_resp)

            # Sprawdzenie, czy odpowied≈∫ z Supabase zawiera dane
            if not insert_resp or not hasattr(insert_resp, 'data'):
                return Response({"error": "Nieoczekiwana odpowied≈∫ od Supabase."}, status=HTTP_500_INTERNAL_SERVER_ERROR)

            if not insert_resp.data:
                return Response({"error": "B≈ÇƒÖd podczas wstawiania rekordu."}, status=HTTP_500_INTERNAL_SERVER_ERROR)

            # Je≈õli operacja przebieg≈Ça pomy≈õlnie, zwracamy komunikat sukcesu
            return Response({"message": "Cel zosta≈Ç pomy≈õlnie dodany."}, status=HTTP_201_CREATED)

        except Exception as e:
            print("DEBUG: WyjƒÖtek przy tworzeniu celu:", str(e))
            return Response({"error": f"B≈ÇƒÖd podczas tworzenia celu: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

# -----------------------------------------------------------------------------
# Funkcja: savings_goals_detail_view
# -----------------------------------------------------------------------------
@api_view(['GET', 'PATCH', 'DELETE'])
@permission_classes([IsAuthenticated])
def savings_goals_detail_view(request, goal_id):
    """
    Widok obs≈ÇugujƒÖcy operacje na pojedynczym celu oszczƒôdno≈õciowym:
      - GET: Pobranie szczeg√≥≈Ç√≥w celu.
      - PATCH: Aktualizacja wybranych p√≥l celu.
      - DELETE: Usuniƒôcie celu.
    Zak≈Çadamy, ≈ºe struktura rekordu jest zgodna z opisem w dokumentacji.
    """
    # -------------------- AUTORYZACJA + SPRAWDZENIE CELU --------------------
    try:
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            return Response({"error": "Brak tokena autoryzacyjnego"}, status=HTTP_403_FORBIDDEN)

        prefix, token = auth_header.split(' ')
        if prefix.lower() != 'bearer':
            return Response({"error": "Nieprawid≈Çowy prefiks tokena"}, status=HTTP_403_FORBIDDEN)

        payload = jwt.decode(token, SUPABASE_KEY, algorithms=['HS256'])
        user_id = payload.get('user_id')

        # Pobranie celu z tabeli SavingsGoals i sprawdzenie, czy cel nale≈ºy do u≈ºytkownika
        goal_resp = supabase.table('SavingsGoals').select('*').eq('SavingsGoals_id', goal_id).single().execute()
        if not goal_resp.data:
            return Response({"error": "Cel nie istnieje."}, status=HTTP_404_NOT_FOUND)

        goal_data = goal_resp.data
        if goal_data['savingsgoals_owner_id'] != user_id:
            return Response({"error": "Brak dostƒôpu do tego celu."}, status=HTTP_403_FORBIDDEN)

    except Exception as e:
        return Response({"error": f"B≈ÇƒÖd autoryzacji lub pobierania celu: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

    # -------------------- OBS≈ÅUGA METOD --------------------
    if request.method == 'GET':
        # Zwracamy dane celu
        return Response({"goal": goal_data}, status=HTTP_200_OK)

    if request.method == 'PATCH':
        try:
            body = json.loads(request.body)
            update_fields = {}

            # Aktualizacja poszczeg√≥lnych p√≥l celu, je≈õli zosta≈Çy przes≈Çane
            if 'savingsgoals_name' in body:
                update_fields['savingsgoals_name'] = body['savingsgoals_name']
            if 'savingsgoals_target_amount' in body:
                update_fields['savingsgoals_target_amount'] = float(body['savingsgoals_target_amount'])
            if 'savingsgoals_amount' in body:
                update_fields['savingsgoals_amount'] = float(body['savingsgoals_amount'])
            if 'savingsgoals_status' in body:
                update_fields['savingsgoals_status'] = body['savingsgoals_status']
            if 'savingsgoals_currency' in body:
                update_fields['savingsgoals_currency'] = body['savingsgoals_currency']

            if not update_fields:
                return Response({"error": "Brak p√≥l do aktualizacji."}, status=HTTP_400_BAD_REQUEST)

            # Wys≈Çanie zapytania aktualizujƒÖcego rekord w Supabase
            supabase.table('SavingsGoals').update(update_fields).eq('SavingsGoals_id', goal_id).execute()

            return Response({"message": "Cel zaktualizowany pomy≈õlnie."}, status=HTTP_200_OK)

        except Exception as e:
            return Response({"error": f"B≈ÇƒÖd aktualizacji: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

    if request.method == 'DELETE':
        try:
            # Wys≈Çanie zapytania usuwajƒÖcego rekord w Supabase
            supabase.table('SavingsGoals').delete().eq('SavingsGoals_id', goal_id).execute()
            return Response({"message": "Cel usuniƒôty pomy≈õlnie."}, status=HTTP_200_OK)

        except Exception as e:
            return Response({"error": f"B≈ÇƒÖd usuwania: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

    # Je≈õli metoda nie jest obs≈Çugiwana, zwr√≥ƒá b≈ÇƒÖd
    return Response({"error": "Method not allowed"}, status=405)

# -----------------------------------------------------------------------------
# Funkcja: categorybudgets_view
# -----------------------------------------------------------------------------
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def categorybudgets_view(request):
    """
    Widok obs≈ÇugujƒÖcy bud≈ºety kategorii.
    Dla danego miesiƒÖca (parametr ?month=YYYY-MM) sprawdza, czy u≈ºytkownik posiada ju≈º bud≈ºety.
    Je≈õli nie, tworzy nowe bud≈ºety (ustawione na limit 0) dla ka≈ºdej kategorii.
    Nastƒôpnie do≈ÇƒÖcza dodatkowe informacje:
      - category_name: nazwa kategorii
      - spent: suma wydatk√≥w w danym miesiƒÖcu
      - percentUsed: procent wykorzystania limitu
      - diffLastMonth: r√≥≈ºnica w wydatkach w por√≥wnaniu z poprzednim miesiƒÖcem
    """
    try:
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            return Response({"error": "Brak tokena"}, status=HTTP_403_FORBIDDEN)

        prefix, token = auth_header.split()
        if prefix.lower() != 'bearer':
            return Response({"error": "Z≈Çy prefix"}, status=HTTP_403_FORBIDDEN)

        payload = jwt.decode(token, SUPABASE_KEY, algorithms=['HS256'])
        user_id = payload.get('user_id')
        if not user_id:
            return Response({"error": "Nieprawid≈Çowy token (brak user_id)"}, status=HTTP_403_FORBIDDEN)

        # Pobranie parametru miesiƒÖca w formacie YYYY-MM
        month_param = request.GET.get('month')
        if not month_param:
            now = datetime.now()
            month_param = now.strftime("%Y-%m")

        # 1) Sprawdzenie, czy bud≈ºety dla danego miesiƒÖca ju≈º istniejƒÖ
        bud_resp = (supabase.table('CategoryBudgets')
                    .select('*')
                    .eq('categorybudget_user_id', user_id)
                    .eq('categorybudget_month', month_param)
                    .execute())
        existing_budgets = bud_resp.data or []

        # 2) Je≈õli nie, tworzymy bud≈ºety dla ka≈ºdej kategorii (limit ustawiony na 0)
        if not existing_budgets:
            cat_resp = supabase.table('Categories').select('*').execute()
            categories_data = cat_resp.data or []

            new_budgets = []
            for cat in categories_data:
                new_budgets.append({
                    "categorybudget_id": str(uuid.uuid4()),
                    "categorybudget_user_id": user_id,
                    "categorybudget_category_id": cat['category_id'],
                    "categorybudget_month": month_param,
                    "categorybudget_limit_amount": 0.0,
                    "categorybudget_currency": "PLN",
                    "notify_exceed": False
                })

            if new_budgets:
                supabase.table('CategoryBudgets').insert(new_budgets).execute()
                # Ponowne pobranie bud≈ºet√≥w po utworzeniu
                bud_resp = (supabase.table('CategoryBudgets')
                            .select('*')
                            .eq('categorybudget_user_id', user_id)
                            .eq('categorybudget_month', month_param)
                            .execute())

        budgets_data = bud_resp.data or []

        # 3) Mapowanie identyfikator√≥w kategorii do nazw
        cat_resp = supabase.table('Categories').select('*').execute()
        cats_data = cat_resp.data or []
        cat_map = {c['category_id']: c.get('category_name', 'Nieznana kategoria') for c in cats_data}

        # 4) Doklejanie dodatkowych danych do ka≈ºdego bud≈ºetu
        for b in budgets_data:
            cat_id = b['categorybudget_category_id']
            limit_ = b.get('categorybudget_limit_amount', 0.0)

            # Dodanie nazwy kategorii
            b['category_name'] = cat_map.get(cat_id, 'Nieznana kategoria')

            # Obliczenie wydatk√≥w w danym miesiƒÖcu dla danej kategorii
            y_s, m_s = month_param.split('-')
            year_i = int(y_s)
            month_i = int(m_s)
            last_day = calendar.monthrange(year_i, month_i)[1]
            start_date = f"{year_i}-{month_i:02d}-01"
            end_date   = f"{year_i}-{month_i:02d}-{last_day}"

            trans_resp = (
                supabase.table('Transactions')
                .select('*')
                .eq('transaction_owner', user_id)
                .eq('transaction_category_id', cat_id)
                .eq('transaction_type', 'Wydatek')
                .gte('transcation_data', start_date)
                .lte('transcation_data', end_date)
                .execute()
            )
            trans_data = trans_resp.data or []
            spent = sum(t['transaction_amount'] for t in trans_data)
            b['spent'] = spent

            # Obliczenie procentu wykorzystania limitu (je≈õli limit > 0)
            if limit_ > 0:
                b['percentUsed'] = (spent / limit_) * 100.0
            else:
                b['percentUsed'] = 0.0

            # Obliczenie r√≥≈ºnicy wydatk√≥w w stosunku do poprzedniego miesiƒÖca
            prev_month = month_i - 1
            prev_year = year_i
            if prev_month <= 0:
                prev_month += 12
                prev_year -= 1
            last_day_prev = calendar.monthrange(prev_year, prev_month)[1]
            start_date_prev = f"{prev_year}-{prev_month:02d}-01"
            end_date_prev   = f"{prev_year}-{prev_month:02d}-{last_day_prev}"
            trans_resp_prev = (
                supabase.table('Transactions')
                .select('*')
                .eq('transaction_owner', user_id)
                .eq('transaction_category_id', cat_id)
                .eq('transaction_type', 'Wydatek')
                .gte('transcation_data', start_date_prev)
                .lte('transcation_data', end_date_prev)
                .execute()
            )
            trans_data_prev = trans_resp_prev.data or []
            spent_prev = sum(t['transaction_amount'] for t in trans_data_prev)
            diff_last_month = spent - spent_prev
            b['diffLastMonth'] = diff_last_month

        return Response({"budgets": budgets_data}, status=200)

    except Exception as e:
        logger.exception("B≈ÇƒÖd w categorybudgets_view:")
        return Response({"error": str(e)}, status=HTTP_500_INTERNAL_SERVER_ERROR)

# -----------------------------------------------------------------------------
# Funkcja: categorybudget_detail_view
# -----------------------------------------------------------------------------
@api_view(['GET', 'PATCH'])
@permission_classes([IsAuthenticated])
def categorybudget_detail_view(request, budget_id):
    """
    Widok obs≈ÇugujƒÖcy pobranie (GET) lub aktualizacjƒô (PATCH) pojedynczego bud≈ºetu okre≈õlonego przez budget_id.
    """
    try:
        # Wykorzystujemy request.user, kt√≥ry jest ustawiony dziƒôki IsAuthenticated
        user_id = str(request.user.id)
    except Exception:
        return Response({"error": "B≈ÇƒÖd autoryzacji."}, status=HTTP_403_FORBIDDEN)

    try:
        # W jednym zapytaniu pobieramy bud≈ºet, filtrujƒÖc po id bud≈ºetu i id u≈ºytkownika
        b_resp = (
            supabase.table('CategoryBudgets')
            .select('*')
            .eq('categorybudget_id', budget_id)
            .eq('categorybudget_user_id', user_id)
            .single()
            .execute()
        )
        if not b_resp.data:
            return Response({"error": "Bud≈ºet nie istnieje lub brak dostƒôpu."}, status=HTTP_404_NOT_FOUND)
        b_data = b_resp.data

        if request.method == 'GET':
            return Response({"budget": b_data}, status=HTTP_200_OK)

        elif request.method == 'PATCH':
            body = request.data
            update_fields = {}

            # Aktualizacja tylko przes≈Çanych p√≥l
            if 'categorybudget_limit_amount' in body:
                try:
                    update_fields['categorybudget_limit_amount'] = float(body['categorybudget_limit_amount'])
                except (ValueError, TypeError):
                    return Response({"error": "Nieprawid≈Çowa warto≈õƒá limitu."}, status=HTTP_400_BAD_REQUEST)
            if 'categorybudget_currency' in body:
                update_fields['categorybudget_currency'] = body['categorybudget_currency']
            if 'notify_exceed' in body:
                update_fields['notify_exceed'] = bool(body['notify_exceed'])

            if not update_fields:
                return Response({"error": "Brak p√≥l do aktualizacji."}, status=HTTP_400_BAD_REQUEST)

            update_resp = (
                supabase.table('CategoryBudgets')
                .update(update_fields)
                .eq('categorybudget_id', budget_id)
                .eq('categorybudget_user_id', user_id)
                .execute()
            )
            # Mo≈ºemy dodatkowo sprawdziƒá update_resp, je≈õli to konieczne.
            return Response({"message": "Zaktualizowano bud≈ºet."}, status=HTTP_200_OK)

        else:
            return Response({"error": "Method Not Allowed"}, status=HTTP_400_BAD_REQUEST)

    except Exception as e:
        return Response({"error": f"B≈ÇƒÖd: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

# -----------------------------------------------------------------------------
# Funkcja: reminders_view
# -----------------------------------------------------------------------------
@api_view(['GET', 'POST'])
@permission_classes([IsAuthenticated])
def reminders_view(request):
    """
    Widok obs≈ÇugujƒÖcy przypomnienia:
      - GET: Pobiera wszystkie przypomnienia u≈ºytkownika.
      - POST: Tworzy nowe przypomnienie.
    """
    try:
        logger.debug(f"Wywo≈Çano reminders_view z metodƒÖ {request.method}")
        # --- Authorization: Weryfikacja tokena ---
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            logger.warning("Brak tokena w nag≈Ç√≥wkach.")
            return Response({"error": "Brak tokena"}, status=HTTP_403_FORBIDDEN)

        try:
            prefix, token = auth_header.split()
            if prefix.lower() != 'bearer':
                logger.warning("Z≈Çy prefix w tokenie autoryzacji.")
                return Response({"error": "Z≈Çy prefix"}, status=HTTP_403_FORBIDDEN)
        except ValueError as e:
            logger.warning(f"Z≈Çy format tokena: {e}")
            return Response({"error": f"Z≈Çy format tokena: {str(e)}"}, status=HTTP_403_FORBIDDEN)

        try:
            payload = jwt.decode(token, SUPABASE_KEY, algorithms=['HS256'])
            user_id = payload.get('user_id')
            if not user_id:
                logger.error("Nieprawid≈Çowy token (brak user_id).")
                return Response({"error": "Nieprawid≈Çowy token (brak user_id)"}, status=HTTP_403_FORBIDDEN)
        except jwt.ExpiredSignatureError:
            logger.warning("Token wygas≈Ç.")
            return Response({"error": "Token wygas≈Ç"}, status=HTTP_403_FORBIDDEN)
        except jwt.InvalidTokenError as e:
            logger.warning(f"Nieprawid≈Çowy token: {e}")
            return Response({"error": f"Nieprawid≈Çowy token: {str(e)}"}, status=HTTP_403_FORBIDDEN)

        # --- Obs≈Çuga ≈ºƒÖdania GET ---
        if request.method == 'GET':
            try:
                resp = (
                    supabase.table('Reminders')
                    .select('*')
                    .eq('reminder_user_id', user_id)
                    .execute()
                )
                if resp.data is None:
                    logger.error(f"B≈ÇƒÖd pobierania przypomnie≈Ñ: {resp}")
                    return Response({"error": "Nie uda≈Ço siƒô pobraƒá przypomnie≈Ñ."}, status=HTTP_500_INTERNAL_SERVER_ERROR)

                data = resp.data or []
                return Response({"reminders": data}, status=HTTP_200_OK)
            except Exception as e:
                logger.exception(f"B≈ÇƒÖd podczas pobierania przypomnie≈Ñ: {e}")
                return Response({"error": f"B≈ÇƒÖd podczas pobierania przypomnie≈Ñ: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        # --- Obs≈Çuga ≈ºƒÖdania POST ---
        elif request.method == 'POST':
            try:
                body = request.data

                # Walidacja wymaganych p√≥l przypomnienia
                reminder_title = body.get('reminder_title')
                reminder_frequency = body.get('reminder_frequency')
                reminder_next_date = body.get('reminder_next_date')

                if not reminder_title:
                    logger.warning("Brakuje pola reminder_title.")
                    return Response({"error": "Pole reminder_title jest wymagane."}, status=HTTP_400_BAD_REQUEST)
                if not reminder_frequency:
                    logger.warning("Brakuje pola reminder_frequency.")
                    return Response({"error": "Pole reminder_frequency jest wymagane."}, status=HTTP_400_BAD_REQUEST)
                if not reminder_next_date:
                    logger.warning("Brakuje pola reminder_next_date.")
                    return Response({"error": "Pole reminder_next_date jest wymagane."}, status=HTTP_400_BAD_REQUEST)

                reminder_description = body.get('reminder_description', '')
                reminder_is_active = body.get('reminder_is_active', True)

                # Logowanie otrzymanych danych
                logger.debug(f"Received POST data: {body}")

                # Budowanie obiektu nowego przypomnienia
                new_reminder = {
                    "reminder_id": str(uuid.uuid4()),
                    "reminder_user_id": user_id,
                    "reminder_title": reminder_title,
                    "reminder_description": reminder_description,
                    "reminder_frequency": reminder_frequency,
                    "reminder_next_date": reminder_next_date,
                    "reminder_is_active": reminder_is_active,
                    "reminder_created_at": datetime.utcnow().isoformat(),  # Data utworzenia przypomnienia
                }

                # Logowanie obiektu przypomnienia przed wstawieniem do bazy
                logger.debug(f"Inserting reminder into Supabase: {new_reminder}")

                # Pr√≥ba wstawienia przypomnienia do Supabase
                ins = supabase.table('Reminders').insert(new_reminder).execute()

                # Weryfikacja, czy operacja zako≈Ñczy≈Ça siƒô sukcesem
                if ins.data is None or not ins.data:
                    logger.error(f"B≈ÇƒÖd przy dodawaniu przypomnienia: {ins}")
                    return Response({"error": "Nie uda≈Ço siƒô dodaƒá przypomnienia."}, status=HTTP_500_INTERNAL_SERVER_ERROR)

                logger.info(f"Przypomnienie zosta≈Ço pomy≈õlnie dodane: {ins.data}")
                return Response({"message": "Przypomnienie zosta≈Ço pomy≈õlnie dodane."}, status=HTTP_201_CREATED)

            except Exception as e:
                logger.exception(f"B≈ÇƒÖd podczas obs≈Çugi ≈ºƒÖdania POST: {e}")
                return Response({"error": f"B≈ÇƒÖd podczas dodawania przypomnienia: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        else:
            logger.warning(f"Metoda {request.method} nie jest obs≈Çugiwana.")
            return Response({"error": "Metoda nie jest dozwolona."}, status=HTTP_405_METHOD_NOT_ALLOWED)

    except Exception as e:
        logger.exception("Nieoczekiwany b≈ÇƒÖd w reminders_view.")
        return Response({"error": f"Nieoczekiwany b≈ÇƒÖd: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

# -----------------------------------------------------------------------------
# Funkcja: reminder_detail_view
# -----------------------------------------------------------------------------
@api_view(['GET', 'PATCH', 'DELETE'])
@permission_classes([IsAuthenticated])
def reminder_detail_view(request, reminder_id):
    """
    Widok obs≈ÇugujƒÖcy operacje na pojedynczym przypomnieniu:
      - GET: Pobranie szczeg√≥≈Çowych danych przypomnienia.
      - PATCH: Aktualizacja wybranych p√≥l przypomnienia.
      - DELETE: Usuniƒôcie przypomnienia.
    """
    try:
        logger.debug(f"Wywo≈Çano reminder_detail_view z metodƒÖ {request.method} dla ID: {reminder_id}")

        # --- Authorization: Weryfikacja tokena ---
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            logger.warning("Brak tokena w nag≈Ç√≥wkach.")
            return Response({"error": "Brak tokena"}, status=HTTP_403_FORBIDDEN)

        try:
            prefix, token = auth_header.split()
            if prefix.lower() != 'bearer':
                logger.warning("Z≈Çy prefix w tokenie autoryzacji.")
                return Response({"error": "Z≈Çy prefix"}, status=HTTP_403_FORBIDDEN)
        except ValueError as e:
            logger.warning(f"Z≈Çy format tokena: {e}")
            return Response({"error": f"Z≈Çy format tokena: {str(e)}"}, status=HTTP_403_FORBIDDEN)

        try:
            payload = jwt.decode(token, SUPABASE_KEY, algorithms=['HS256'])
            user_id = payload.get('user_id')
            if not user_id:
                logger.error("Nieprawid≈Çowy token (brak user_id).")
                return Response({"error": "Nieprawid≈Çowy token (brak user_id)"}, status=HTTP_403_FORBIDDEN)
        except jwt.ExpiredSignatureError:
            logger.warning("Token wygas≈Ç.")
            return Response({"error": "Token wygas≈Ç"}, status=HTTP_403_FORBIDDEN)
        except jwt.InvalidTokenError as e:
            logger.warning(f"Nieprawid≈Çowy token: {e}")
            return Response({"error": f"Nieprawid≈Çowy token: {str(e)}"}, status=HTTP_403_FORBIDDEN)

        # --- Pobranie przypomnienia z bazy ---
        try:
            single = (
                supabase.table('Reminders')
                .select('*')
                .eq('reminder_id', reminder_id)
                .single()
                .execute()
            )
            if not single.data:
                logger.error(f"Przypomnienie o ID {reminder_id} nie istnieje.")
                return Response({"error": "Przypomnienie nie istnieje"}, status=HTTP_404_NOT_FOUND)

            reminder = single.data
            # Weryfikacja, czy przypomnienie nale≈ºy do zalogowanego u≈ºytkownika
            if reminder['reminder_user_id'] != user_id:
                logger.warning(f"U≈ºytkownik {user_id} pr√≥buje uzyskaƒá dostƒôp do przypomnienia {reminder_id}, kt√≥re nie jest jego.")
                return Response({"error": "Brak dostƒôpu do tego przypomnienia"}, status=HTTP_403_FORBIDDEN)

        except Exception as e:
            logger.exception(f"B≈ÇƒÖd podczas pobierania przypomnienia {reminder_id}: {e}")
            return Response({"error": f"B≈ÇƒÖd podczas pobierania przypomnienia: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        # --- Obs≈Çuga metod ---
        if request.method == 'GET':
            return Response({"reminder": reminder}, status=HTTP_200_OK)

        elif request.method == 'PATCH':
            try:
                body = request.data
                update_fields = {}
                # Aktualizacja p√≥l przypomnienia, je≈õli zosta≈Çy przes≈Çane
                if 'reminder_title' in body:
                    update_fields['reminder_title'] = body['reminder_title']
                if 'reminder_description' in body:
                    update_fields['reminder_description'] = body['reminder_description']
                if 'reminder_frequency' in body:
                    update_fields['reminder_frequency'] = body['reminder_frequency']
                if 'reminder_next_date' in body:
                    update_fields['reminder_next_date'] = body['reminder_next_date']
                if 'reminder_is_active' in body:
                    update_fields['reminder_is_active'] = body['reminder_is_active']

                logger.debug(f"Patchowanie przypomnienia {reminder_id} z danymi: {update_fields}")
                upd = (
                    supabase.table('Reminders')
                    .update(update_fields)
                    .eq('reminder_id', reminder_id)
                    .execute()
                )

                if upd.data is None or not upd.data:
                    logger.error(f"B≈ÇƒÖd podczas aktualizacji przypomnienia {reminder_id}: {upd}")
                    return Response({"error": "Nie uda≈Ço siƒô zaktualizowaƒá przypomnienia."}, status=HTTP_500_INTERNAL_SERVER_ERROR)

                logger.info(f"Przypomnienie {reminder_id} zosta≈Ço pomy≈õlnie zaktualizowane.")
                return Response({"message": "Zaktualizowano przypomnienie"}, status=HTTP_200_OK)

            except Exception as e:
                logger.exception(f"B≈ÇƒÖd podczas aktualizacji przypomnienia {reminder_id}: {e}")
                return Response({"error": f"B≈ÇƒÖd podczas aktualizacji przypomnienia: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        elif request.method == 'DELETE':
            try:
                logger.debug(f"Usuwanie przypomnienia {reminder_id}.")
                del_ = (
                    supabase.table('Reminders')
                    .delete()
                    .eq('reminder_id', reminder_id)
                    .execute()
                )

                if del_.data is None or not del_.data:
                    logger.error(f"B≈ÇƒÖd podczas usuwania przypomnienia {reminder_id}: {del_}")
                    return Response({"error": "Nie uda≈Ço siƒô usunƒÖƒá przypomnienia."}, status=HTTP_500_INTERNAL_SERVER_ERROR)

                logger.info(f"Przypomnienie {reminder_id} zosta≈Ço pomy≈õlnie usuniƒôte.")
                return Response({"message": "Usuniƒôto przypomnienie"}, status=HTTP_200_OK)

            except Exception as e:
                logger.exception(f"B≈ÇƒÖd podczas usuwania przypomnienia {reminder_id}: {e}")
                return Response({"error": f"B≈ÇƒÖd podczas usuwania przypomnienia: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

        else:
            logger.warning(f"Metoda {request.method} nie jest obs≈Çugiwana.")
            return Response({"error": "Metoda nie jest dozwolona."}, status=HTTP_405_METHOD_NOT_ALLOWED)

    except Exception as e:
        logger.exception("Nieoczekiwany b≈ÇƒÖd w reminder_detail_view:")
        return Response({"error": f"Nieoczekiwany b≈ÇƒÖd: {str(e)}"}, status=HTTP_500_INTERNAL_SERVER_ERROR)

# -----------------------------------------------------------------------------
# Funkcja: reminders_notifications_view
# -----------------------------------------------------------------------------
@api_view(['GET'])
@permission_classes([IsAuthenticated])
def reminders_notifications_view(request):
    """
    Widok zwracajƒÖcy przypomnienia (aktywne), kt√≥re sƒÖ nadchodzƒÖce w ciƒÖgu 7 dni.
    Mo≈ºe byƒá wykorzystywany do wy≈õwietlania powiadomie≈Ñ w interfejsie u≈ºytkownika (np. w navbarze).
    """
    try:
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            return Response({"error": "Brak tokena"}, status=403)
        prefix, token = auth_header.split()
        if prefix.lower() != 'bearer':
            return Response({"error": "Prefiks z≈Çy"}, status=403)

        payload = jwt.decode(token, SUPABASE_KEY, algorithms=['HS256'])
        user_id = payload.get('user_id')

        # Okre≈õlenie zakresu dat: od dzisiejszej daty do 7 dni w przysz≈Ço≈õƒá
        now_date = datetime.now().date()
        future_date = now_date + timedelta(days=7)
        resp = (
            supabase.table('reminders')
            .select('*')
            .eq('reminder_user_id', user_id)
            .eq('reminder_is_active', True)
            .gte('reminder_next_date', now_date.isoformat())
            .lte('reminder_next_date', future_date.isoformat())
            .execute()
        )
        data = resp.data or []
        return Response({"reminders": data}, status=200)

    except Exception as e:
        return Response({"error": str(e)}, status=500)
